Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  # For the Loadbalancer Security Group
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows http to load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security group for the web servers in the private subnets.
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # The launch configuration settings to use with the auto scaling group
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install nginx -y
          sudo apt install net-tools -y
          sudo systemctl start nginx.service
          sudo systemctl enable nginx.service
          host=$(hostname)
          ip=$(ifconfig | grep 'inet ' | grep -v '127.0.0.1' | cut -c 7-17)
          sudo chown -R $USER:$USER /var/www
          echo 'NerdRx Server IP Address is '$host'' > /var/www/html/index.nginx-debian.html
      ImageId: ami-0574da719dca65348
      KeyName: NerdDev
      SecurityGroups:
        - Ref: WebServerSG
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  # Autoscaling group for ec2 instances
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-SUBNETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "2"
      MaxSize: "2"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # Load balancer
  WebALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBA-SUBNET"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBB-SUBNET"
      SecurityGroups:
        - Ref: ALBSG

  # The loadbalancer listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebALB
      Port: "80"
      Protocol: HTTP

  # The listerner rules
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  # The load balancing target group configuration
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
